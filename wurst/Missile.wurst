/**
    This package provides a light-weight system for customizing missiles.

    Missile properties can be changed at any time after creation (except for the art).

    Example:
        let md = new MissileDefinition()
        md.art = "Abilities\\Weapons\\Arrow\\ArrowMissile.mdl"

        missile = new Missile(casterPosition, targetUnit, md) ->
            doThisOnHit()

        doAfter(1.0) ->
            missile.speed = 1800
*/
package Missile
import ClosureForGroups
import HashSet
import TimerUtils

public interface FuncUnit
    function callback(unit targetUnit)

public interface FuncPos3
    function callback(vec3 targetPos3)

public class MissileDefinition
    var art = ""
    var owner = players[0]
    var scale = 1.
    var height = 80.
    var speed = 900
    var trail = ""
    var trailAttach = ZERO3
    var collisionSize = 0.
    FuncPos3 onHitPos3 = targetPos3 -> DoNothing()
    FuncUnit onHitUnit = targetUnit -> DoNothing()
    FuncUnit onCollision = targetUnit -> DoNothing()

    function inherit(thistype def)
        this.owner = def.owner
        this.scale = def.scale
        this.height = def.height
        this.speed = def.speed
        this.trail = def.trail
        this.trailAttach = def.trailAttach
        this.onHitPos3 = def.onHitPos3
        this.onHitUnit = def.onHitUnit
        this.collisionSize = def.collisionSize

    function setOnHitPos3(FuncPos3 onHit)
        this.onHitPos3 = targetPos3 -> onHit.callback(targetPos3)

    function setOnHitUnit(FuncUnit onHit)
        this.onHitUnit = targetUnit -> onHit.callback(targetUnit)

    function setOnCollision(FuncUnit onCollision)
        this.onCollision = targetUnit -> onCollision.callback(targetUnit)

public class Missile extends MissileDefinition
    use TimedLoop
    
    /** Public state of the missile, can be manipulated after creation. */
    vec3 targetPos3
    unit targetUnit

    /** Create a new missile from any model and set its target. */
    construct(vec3 sourcePos, vec3 targetPos3, MissileDefinition def)
        this.targetPos3 = targetPos3
        create(sourcePos, def)

    /** Create a new missile from any model and set its target. */
    construct(vec3 sourcePos, unit targetUnit, MissileDefinition def)
        if targetUnit != null
            this.targetUnit = targetUnit
            create(sourcePos, def)

    /* Private state of the missile. */
    private effect eff
    private constant hasCollided = new HashSet<unit>()

    /* Create a new missile and set its target. */
    private function create(vec3 sourcePos, MissileDefinition def)
        this.owner = def.owner
        this.scale = def.scale
        this.height = def.height
        this.speed = def.speed
        this.trail = def.trail
        this.trailAttach = def.trailAttach
        this.onHitPos3 = def.onHitPos3
        this.onHitUnit = def.onHitUnit
        this.collisionSize = def.collisionSize
        setOnHitPos3(def.onHitPos3)
        setOnHitUnit(def.onHitUnit)
        setOnCollision(def.onCollision)
        this.eff = addEffect(def.art, sourcePos.add(0., 0., def.height))
        startTimedLoop()

    /* Move the missile to the target */
    override function onTimedLoop()
        let source = eff.getPos3()
        let target = (targetUnit != null ? targetUnit.getPos3Fly() : targetPos3) + vec3(0., 0., height)
        let yaw = (target.toVec2() - source.toVec2()).getAngle()
        let pitch = -(target - source).norm().z.asin()

        if trail != ""
            addEffect(trail, source + trailAttach)
                ..setScale(scale)
                ..setYaw(yaw)
                ..setPitch(pitch)
                ..destr()
        
        if collisionSize > 0.
            forUnitsInRange(source.toVec2(), collisionSize) u ->
                if not hasCollided.has(u) and u.isAlive() and u.isEnemyOf(owner)
                    hasCollided.add(u)
                    onCollision.callback(u)

        if source.distanceToSq(target) >= (speed.toReal() * ANIMATION_PERIOD).squared()
            eff
                ..setPos(source.moveTowards(target, speed.toReal() * ANIMATION_PERIOD))
                ..setScale(scale)
                ..setYaw(yaw)
                ..setPitch(pitch)
        else
            stopTimedLoopAndDestroy()
            
    ondestroy
        eff.destr()
        onHitPos3.callback(targetPos3)
        if targetUnit != null
            onHitUnit.callback(targetUnit)

        destroy onHitPos3
        destroy onHitUnit
        destroy onCollision
